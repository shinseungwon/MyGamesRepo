void Run(promise<string>* p) {
	HDC hdc = GetDC(hWnd);

	COLORREF* arr = (COLORREF*)calloc(512 * 512, sizeof(COLORREF));
	HDC src = CreateCompatibleDC(hdc);
	HBITMAP map;
	//LPCWSTR path = TEXT("C:\\Users\\ssw90\\source\\repos\\MyGamesRepo\\GameEngine\\Debug\\test.bmp");
	//LPCWSTR path = TEXT("C:\\Download\\test3.bmp");	
	LPCWSTR path = TEXT("bmps\\test.bmp");
	
	map = (HBITMAP)LoadImage(GetModuleHandle(NULL), path, IMAGE_BITMAP, 0, 0, LR_DEFAULTSIZE | LR_LOADFROMFILE);
	
	
	//SelectObject(src, map);
	//BitBlt(hdc, 10, 10, 512, 512, src, 0, 0, SRCCOPY);

	//return;
	int r = 0, g = 0, b = 0;
	int x = 0, y = 0, z = 0;
	while (1) {

		//Sleep(1000);
		//for (int i = 0; i < 512; i++) {
		//	for (int j = 0; j < 512; j++) {				
		//		x = (i + j + r) % 256;
		//		y = (i + j + b) % 256;
		//		z = (i + j + b) % 256;
		//		arr[i* 512 + j] = RGB(x, y, z);
		//	}
		//}
		//map = CreateBitmap(512, 512, 1, 8 * 4, (void*)arr);

		SelectObject(src, map);
		BitBlt(hdc, 10 + r, 10 + g, 512, 512, src, 0, 0, SRCCOPY);
		r++;
		g++;
		b++;
		cout << "Drawing ..." << r << ' ' << g << ' ' << b << endl;
		Sleep(10);
	}

	DeleteDC(src);
	ReleaseDC(hWnd, hdc);
	p->set_value("End");
}

	ifstream ifstr("bmps\\test1.bmp", ios::binary);

	if (ifstr.is_open()) {
		vector<char> vc(istreambuf_iterator<char>(ifstr), (istreambuf_iterator<char>()));
		for (int i = 0; i < vc.size(); i++) {
			cout << vc[i] << ' ';
		}
		cout << endl;		
	}
	else {
		cout << "x" << endl;
	}
	
						//cout << (int)(unsigned char)vc[i] << ' ';
					//if (vc[i] == 0x00) {
					//	cout << ' ';
					//}
					//else {
					//	cout << 'X';
					//}

					//cout << (int)(unsigned char)vc[i] << ' ' << (int)(unsigned char)vc[i + 1] << ' ' << (int)(unsigned char)vc[i + 2] << endl;
					//if (vc[i] != 0x00 || vc[i + 1] != 0x00 || vc[i + 2] != 0x00) {
					//	cout << 'X';
					//}
					//else {
					//	cout << ' ';
					//}

					//if ((i - headerSize + 1) % (36 * 3) == 1) {
					//	cout << endl;
					//}
					
					//class BitmapPack {
//public:
//	COLORREF* data;
//	int size;
//	int width;
//	int height;
//};

//BitmapPack* GetBitmap(string path) {
//	BitmapPack* res = new BitmapPack();
//	int i = 0, j = 0;
//	char* arr = nullptr;
//
//	ifstream ifstr(path, ios::binary);
//
//	if (ifstr.is_open()) {
//		vector<char> vc(istreambuf_iterator<char>(ifstr), (istreambuf_iterator<char>()));
//		if (vc[0] == 0x42 && vc[1] == 0x4D) {
//
//			int headerSize;
//			int width;
//			int height;
//			short bitCount;
//
//			memcpy(&headerSize, &vc[10], sizeof(int));
//			memcpy(&width, &vc[18], sizeof(int));
//			memcpy(&height, &vc[22], sizeof(int));
//			memcpy(&bitCount, &vc[28], sizeof(short));
//
//			int resultSize = (vc.size() - headerSize) / 3 * 4;
//			arr = new char[resultSize];
//
//			if (bitCount == 24) {
//				for (i = headerSize; i < vc.size(); i += 3) {
//					arr[j++] = vc[i];
//					arr[j++] = vc[i + 1];
//					arr[j++] = vc[i + 2];
//					arr[j++] = char(0);
//				}
//
//				res->size = resultSize / 4;
//				res->width = width;
//				res->height = height;
//				res->data = (COLORREF*)arr;
//			}
//			else {
//				cout << "file is not 24bit bitmap" << endl;
//			}
//		}
//		else {
//			cout << "file is not bitmap" << endl;
//		}
//
//		ifstr.close();
//	}
//	else {
//		cout << "file not exist" << endl;
//	}
//
//	return res;
//}

	//HBITMAP hBitmap = (HBITMAP)LoadImage(GetModuleHandle(NULL), path, IMAGE_BITMAP, 0, 0, LR_DEFAULTSIZE | LR_LOADFROMFILE);
	//BITMAP bitmap;
	//GetObject(hBitmap, sizeof(BITMAP), &bitmap);